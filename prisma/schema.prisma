// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Menu {
  id                String @default(uuid()) @id
  title             String @db.VarChar(100) @unique
  subtitle          String @db.VarChar(100)
  button            Json @db.Json
  type              String? @db.VarChar(100)
  hidden            Boolean?
  active            Boolean? @default(true)
  disabled          Boolean? @default(false)
  tooltip           String?
  link              String?
  fragment          String?
  preserveFragment  Boolean?
  queryParams       Json
  classes           Json
  icon              String?
  badge             Json
  meta              Json
  parentId          String?
  parent            Menu? @relation(name: "children", fields: [parentId], references: [id]) 
  children          Menu[] @relation(name: "children")    
  menuRoles         MenuRole[] @relation(name: "menuroles")    
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model MenuRole {
  id            String @default(uuid()) @id
  menuId        String @db.VarChar(255)
  menu          Menu? @relation(name: "menuroles", fields: [menuId], references: [id]) 
  roleId        String
  role          SettingDetail? @relation(name: "menurolessetting", fields: [roleId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model User {
  id            String @default(uuid()) @id
  userName      String @db.VarChar(100) @unique
  password      String
  firstName     String @db.VarChar(100)
  lastName      String @db.VarChar(100)
  email         String? @db.VarChar(100)
  phone         String? @db.VarChar(15)
  photo         String?
  roleId        String
  role          SettingDetail? @relation(name: "usersrolessetting", fields: [roleId], references: [id])
  active        Boolean? @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// enum EnumRoles { 
//   SUPERADMINISTRADOR
//   LIDER_COMERCIAL
//   VENDEDOR
//   CAJA
//   COORDINADOR_DE_LOGISTICA
//   CONDUCTOR
// }

model Customer {
  id                  String @default(uuid()) @id
  typeId              String
  type                SettingDetail? @relation(name: "typecustomersetting", fields: [typeId], references: [id])
  identificationTypeId  String @db.VarChar(100)
  identificationType  SettingDetail? @relation(name: "identificationtypesetting", fields: [identificationTypeId], references: [id])
  identification      String @db.VarChar(20) @unique
  name                String?
  source              String @db.VarChar(100)
  email               String @db.VarChar(100)
  firstName           String @db.VarChar(100)
  lastName            String? @db.VarChar(100)
  lastName2           String? @db.VarChar(100)
  address             String? @db.VarChar(255)
  phone               String? @db.VarChar(30)
  // companyName         String?
  sendToSap           Boolean? @default(false)
  messageError        String? @db.Text() @default("")
  cardType            String? // es igual source
  groupCode           String?
  payTermsGrpCode     String?
  salesPersonCode     String?
  U_HBT_RegTrib       String?
  U_HBT_TipDoc        String? // es igual identification type
  U_HBT_MunMed        String? 
  U_HBT_TipEnt        String? // es igual a type
  U_HBT_Nombres       String?
  U_HBT_Apellido1     String?
  U_HBT_Apellido2     String?
  U_HBT_Nacional      String?
  U_HBT_RegFis        String?
  U_HBT_ResFis        String?
  U_HBT_MedPag        String?
  AddressName         String?
  Street              String? @default("GENERAL")
  Block               String?
  ZipCode             String? @default("0")
  City                String?
  County              String?
  Country             String? @default("CO")
  State               String?
  AddressType         String? @default("bo_BillTo")
  BPCode              String?
  U_HBT_DirMM         String?
  FederalTaxID        String?
  orders              Order[] @relation(name: "ordercustomer")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// enum EnumCustomerType { 
//   PERSONA_NATURAL
//   PERSONA_JURIDICA
// }


model Order {
  id                  String @default(uuid()) @id
  customerId          String @db.VarChar(100)
  customer            Customer? @relation(name: "ordercustomer", fields: [customerId], references: [id])
  date                DateTime @db.Date
  dueDate             DateTime? @db.Date
  vatTotal            Float?
  subTotal            Float
  total               Float
  discount            Float?
  sendToSap           Boolean? @default(false)  
  integrationId       Int?
  docNumber           Int?
  comments            String? @db.Text
  serie               String?
  salesPersonCode     String?
  messageError        String? @db.Text() @default("")
  status              String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  orderDetails        OrderDetail[] @relation(name: "orderdetailorder")
}

model OrderDetail {
  id                  String @default(uuid()) @id
  orderId             String @db.VarChar(100)
  order               Order? @relation(name: "orderdetailorder", fields: [orderId], references: [id], onDelete: Cascade)
  itemCode            String
  description         String
  aditionalInfo       String
  discount            Float
  amount              Int
  value               Float
  vat                 Float
  project             String
  wareHouseCode       String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Integration {
  id                  String @default(uuid()) @id
  module              String @db.VarChar(255) @unique
  integrationDetails  IntegrationDetail[] @relation(name: "integrationdetailIntegration")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model IntegrationDetail {
  id                  String @default(uuid()) @id
  fieldApp            String @db.VarChar(255) 
  fieldIntegration    String @db.VarChar(255) 
  integrationId       String @db.VarChar(100)
  integration         Integration @relation(name: "integrationdetailIntegration", fields: [integrationId], references: [id])
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Setting {
  id                  String @default(uuid()) @id
  name                String @unique
  settingDetail       SettingDetail[] @relation(name: "settingdetailsetting")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model SettingDetail {
  id                          String @default(uuid()) @id
  code                        String
  name                        String
  settingId                   String
  setting                     Setting? @relation(name: "settingdetailsetting", fields: [settingId], references: [id], onDelete: Cascade)
  users                       User[] @relation(name: "usersrolessetting")
  menuRoles                   MenuRole[] @relation(name: "menurolessetting")
  customers                   Customer[] @relation(name: "typecustomersetting")
  customerIdentificationTypes Customer[] @relation(name: "identificationtypesetting")
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
}

model Items {
  id                          String @default(uuid()) @id
  code                        String
  name                        String
  price                       Float
  quantityOnStock             Int
  quantityOrderedFromVendors  Int
  quantityOrderedByCustomers  Int
  itemsWareHouses             ItemsWareHouse[] @relation(name: "itemitemwarehouse")
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
}

model ItemsWareHouse {
  id                          String @default(uuid()) @id
  itemId                      String
  item                        Items? @relation(name: "itemitemwarehouse", fields: [itemId], references: [id], onDelete: Cascade)
  warehouseCode               String
  warehouseName               String
  inStock                     Int
  itemCode                    String?
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
}